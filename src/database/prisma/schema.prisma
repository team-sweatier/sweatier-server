// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tier {
  id          String @id
  value       String @default("beginner")
  description String

  sportsTypeId Int
  sportType    SportsType @relation(fields: [sportsTypeId], references: [id])

  users User[]  @relation(name: "userTier")
  match Match[]

  @@unique([value, sportsTypeId])
}

model User {
  id String @id

  userProfile UserProfile?

  hostingMatches       Match[]      @relation(name: "hostMatch")
  participatingMatches Match[]      @relation(name: "participantMatch")
  likedSportsTypes     SportsType[] @relation(name: "likerSportsType")

  score Score[]

  tiers Tier[] @relation(name: "userTier")

  email             String  @unique
  encryptedPassword String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  img    String
  gender Gender

  nickName          String    @unique
  nickNameUpdatedAt DateTime?

  oneLiner      String?
  bankName      String
  accountNumber String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Match {
  id String @id

  hostId String
  host   User   @relation(name: "hostMatch", fields: [hostId], references: [id])

  participants User[] @relation(name: "participantMatch")

  score Score[]

  sportsTypeId Int
  sportsType   SportsType @relation(fields: [sportsTypeId], references: [id])

  tierId String
  tier   Tier   @relation(fields: [tierId], references: [id])

  title      String
  content    String
  gender     Gender
  capability Int

  address String

  matchDay DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Score {
  id String @id

  userId String
  user   User   @relation(fields: [userId], references: [id])

  sportsTypeId Int
  sportsType   SportsType @relation(fields: [sportsTypeId], references: [id])

  matchId String
  match   Match  @relation(fields: [matchId], references: [id])

  value Int

  createdAt DateTime
}

model SportsType {
  id   Int    @id @default(autoincrement())
  name String @unique

  score  Score[]
  tier   Tier[]
  match  Match[]
  likers User[]  @relation(name: "likerSportsType")
}

enum Gender {
  male
  female
  both
}
